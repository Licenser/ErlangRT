#!/usr/bin/env python3
# takes: atoms.tab
# Prints a Rust source file predefined bif names/arities (also they are
# preregistered by emulator::atom during the startup)
import erlangrt.genop as genop


def main():
    conf = genop.OTP20()
    tables = genop.OTPTables(conf)

    print("""\
//! Generated by `codegen/create_gen_bif.py`
//! Creates a lookup table of BIF functions
//! Config used: {otp} 
#![allow(dead_code)]

use defs::Arity;
use emulator::gen_atoms;
use term::lterm::*;
use bif;


pub struct BifTabItem {{
    pub m: LTerm, 
    pub f: LTerm, 
    pub arity: Arity, 
    pub func: bif::BifFn
}}


pub static BIF_TABLE: &'static [BifTabItem] = &[
""".format(otp=conf.__class__.__name__))

    for bif in tables.bif_tab:
        fun_atom = tables.atom_dict[bif.atom_str]  # type: genop.Atom
        print("    BifTabItem {{ m: gen_atoms::{mod}, "
              "f: gen_atoms::{fun}, arity: {arity},"
              "\n        func: bif::{biftype}_{fun_name}_{arity} }},"
              "".format(cname=bif.cname,
                        mod=genop.enum_name(bif.mod).upper(),
                        fun=fun_atom.cname.upper(),
                        fun_name=genop.c_fun_name(bif.cname),
                        biftype=bif.biftype,
                        arity=bif.arity))

    print("];\n")


if __name__ == "__main__":
    main()
