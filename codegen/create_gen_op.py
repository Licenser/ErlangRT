#!/usr/bin/env python3
# takes: genop.tab from erlang/otp
# Prints a Rust source file with array which maps erlang asm opcodes to numbers
import erlangrt.genop as genop

genop.load()

print("""\
//! Generated by codegen/vm_gen_op.py
//! Maps genop table from Erlang/OTP source to Rust 

""")

# print arity map
print("static ARITY_MAP: &'static [u8] = &[ 0, // opcode 0 does not exist")
for opcode in range(genop.MIN_OPCODE, genop.MAX_OPCODE + 1):
    op = genop.ops_by_code[opcode]
    print("    %d, // opcode: %d (%s)" % (op['arity'], opcode, op['name']))
print("""\
];

pub fn opcode_arity(opcode: u8) -> u8 { 
  ARITY_MAP[opcode as usize]
}
""")

# ------ print opcode names map ------
# print("#[cfg(debug)]")
print("""const OPCODE_NAME_MAP: &'static [&'static str] = &[
    \"\", // opcode 0 does not exist""")
for opcode in range(genop.MIN_OPCODE, genop.MAX_OPCODE + 1):
    op = genop.ops_by_code[opcode]
    print("    \"%s\", // opcode: %d" % (op['name'], opcode))
print("""\
];

pub fn opcode_name(opcode: u8) -> &'static str { 
  OPCODE_NAME_MAP[opcode as usize]
}
""")
