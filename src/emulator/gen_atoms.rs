//! Generated by codegen/create_gen_atoms.py
//! Creates array of predefined atoms
//! Config used: OTP20 
#![allow(dead_code)]

use term::immediate;
use term::lterm::LTerm;


pub const APPLY: LTerm = LTerm { value: immediate::make_atom_raw_const(0) };
pub const BADARG: LTerm = LTerm { value: immediate::make_atom_raw_const(1) };
pub const BADARITH: LTerm = LTerm { value: immediate::make_atom_raw_const(2) };
pub const BADARITY: LTerm = LTerm { value: immediate::make_atom_raw_const(3) };
pub const BADFUN: LTerm = LTerm { value: immediate::make_atom_raw_const(4) };
pub const BADMATCH: LTerm = LTerm { value: immediate::make_atom_raw_const(5) };
pub const CASECLAUSE: LTerm = LTerm { value: immediate::make_atom_raw_const(6) };
pub const ERLANG: LTerm = LTerm { value: immediate::make_atom_raw_const(7) };
pub const ERROR: LTerm = LTerm { value: immediate::make_atom_raw_const(8) };
pub const EXIT: LTerm = LTerm { value: immediate::make_atom_raw_const(9) };
pub const FALSE: LTerm = LTerm { value: immediate::make_atom_raw_const(10) };
pub const FUNCTIONCLAUSE: LTerm = LTerm { value: immediate::make_atom_raw_const(11) };
pub const HIGH: LTerm = LTerm { value: immediate::make_atom_raw_const(12) };
pub const IFCLAUSE: LTerm = LTerm { value: immediate::make_atom_raw_const(13) };
pub const INIT: LTerm = LTerm { value: immediate::make_atom_raw_const(14) };
pub const KILL: LTerm = LTerm { value: immediate::make_atom_raw_const(15) };
pub const KILLED: LTerm = LTerm { value: immediate::make_atom_raw_const(16) };
pub const LOW: LTerm = LTerm { value: immediate::make_atom_raw_const(17) };
pub const NOCATCH: LTerm = LTerm { value: immediate::make_atom_raw_const(18) };
pub const NORMAL: LTerm = LTerm { value: immediate::make_atom_raw_const(19) };
pub const OK: LTerm = LTerm { value: immediate::make_atom_raw_const(20) };
pub const SYSTEMLIMIT: LTerm = LTerm { value: immediate::make_atom_raw_const(21) };
pub const THROW: LTerm = LTerm { value: immediate::make_atom_raw_const(22) };
pub const TRAPEXIT: LTerm = LTerm { value: immediate::make_atom_raw_const(23) };
pub const TRUE: LTerm = LTerm { value: immediate::make_atom_raw_const(24) };
pub const UNDEF: LTerm = LTerm { value: immediate::make_atom_raw_const(25) };
pub const UNDEFINED: LTerm = LTerm { value: immediate::make_atom_raw_const(26) };
pub const G: LTerm = LTerm { value: immediate::make_atom_raw_const(27) };
pub const B: LTerm = LTerm { value: immediate::make_atom_raw_const(28) };
pub const U: LTerm = LTerm { value: immediate::make_atom_raw_const(29) };
pub const EBIFBANG2: LTerm = LTerm { value: immediate::make_atom_raw_const(30) };
pub const STIMES2: LTerm = LTerm { value: immediate::make_atom_raw_const(31) };
pub const SPLUS1: LTerm = LTerm { value: immediate::make_atom_raw_const(32) };
pub const EBIFPLUSPLUS2: LTerm = LTerm { value: immediate::make_atom_raw_const(33) };
pub const SMINUS1: LTerm = LTerm { value: immediate::make_atom_raw_const(34) };
pub const EBIFMINUSMINUS2: LTerm = LTerm { value: immediate::make_atom_raw_const(35) };
pub const DIV2: LTerm = LTerm { value: immediate::make_atom_raw_const(36) };
pub const SNEQEQ2: LTerm = LTerm { value: immediate::make_atom_raw_const(37) };
pub const SLT2: LTerm = LTerm { value: immediate::make_atom_raw_const(38) };
pub const SNEQ2: LTerm = LTerm { value: immediate::make_atom_raw_const(39) };
pub const SEQ2: LTerm = LTerm { value: immediate::make_atom_raw_const(40) };
pub const SLE2: LTerm = LTerm { value: immediate::make_atom_raw_const(41) };
pub const SEQEQ2: LTerm = LTerm { value: immediate::make_atom_raw_const(42) };
pub const SGT2: LTerm = LTerm { value: immediate::make_atom_raw_const(43) };
pub const SGE2: LTerm = LTerm { value: immediate::make_atom_raw_const(44) };
pub const AND: LTerm = LTerm { value: immediate::make_atom_raw_const(45) };
pub const BAND: LTerm = LTerm { value: immediate::make_atom_raw_const(46) };
pub const BNOT: LTerm = LTerm { value: immediate::make_atom_raw_const(47) };
pub const BOR: LTerm = LTerm { value: immediate::make_atom_raw_const(48) };
pub const BSL: LTerm = LTerm { value: immediate::make_atom_raw_const(49) };
pub const BSR: LTerm = LTerm { value: immediate::make_atom_raw_const(50) };
pub const BXOR: LTerm = LTerm { value: immediate::make_atom_raw_const(51) };
pub const INTDIV2: LTerm = LTerm { value: immediate::make_atom_raw_const(52) };
pub const NOT: LTerm = LTerm { value: immediate::make_atom_raw_const(53) };
pub const OR: LTerm = LTerm { value: immediate::make_atom_raw_const(54) };
pub const REM: LTerm = LTerm { value: immediate::make_atom_raw_const(55) };
pub const XOR: LTerm = LTerm { value: immediate::make_atom_raw_const(56) };
pub const ABS: LTerm = LTerm { value: immediate::make_atom_raw_const(57) };
pub const ACOS: LTerm = LTerm { value: immediate::make_atom_raw_const(58) };
pub const ACOSH: LTerm = LTerm { value: immediate::make_atom_raw_const(59) };
pub const ADLER32: LTerm = LTerm { value: immediate::make_atom_raw_const(60) };
pub const ADLER32COMBINE: LTerm = LTerm { value: immediate::make_atom_raw_const(61) };
pub const APPEND: LTerm = LTerm { value: immediate::make_atom_raw_const(62) };
pub const APPENDELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(63) };
pub const ASIN: LTerm = LTerm { value: immediate::make_atom_raw_const(64) };
pub const ASINH: LTerm = LTerm { value: immediate::make_atom_raw_const(65) };
pub const AT: LTerm = LTerm { value: immediate::make_atom_raw_const(66) };
pub const ATAN: LTerm = LTerm { value: immediate::make_atom_raw_const(67) };
pub const ATAN2: LTerm = LTerm { value: immediate::make_atom_raw_const(68) };
pub const ATANH: LTerm = LTerm { value: immediate::make_atom_raw_const(69) };
pub const ATOMTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(70) };
pub const ATOMTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(71) };
pub const BINIS7BIT: LTerm = LTerm { value: immediate::make_atom_raw_const(72) };
pub const BINTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(73) };
pub const BINARYPART: LTerm = LTerm { value: immediate::make_atom_raw_const(74) };
pub const BINARYTOATOM: LTerm = LTerm { value: immediate::make_atom_raw_const(75) };
pub const BINARYTOEXISTINGATOM: LTerm = LTerm { value: immediate::make_atom_raw_const(76) };
pub const BINARYTOFLOAT: LTerm = LTerm { value: immediate::make_atom_raw_const(77) };
pub const BINARYTOINTEGER: LTerm = LTerm { value: immediate::make_atom_raw_const(78) };
pub const BINARYTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(79) };
pub const BINARYTOTERM: LTerm = LTerm { value: immediate::make_atom_raw_const(80) };
pub const BITSIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(81) };
pub const BITSTRINGTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(82) };
pub const BREAKPOINT: LTerm = LTerm { value: immediate::make_atom_raw_const(83) };
pub const BUMPREDUCTIONS: LTerm = LTerm { value: immediate::make_atom_raw_const(84) };
pub const BYTESIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(85) };
pub const CALLONLOADFUNCTION: LTerm = LTerm { value: immediate::make_atom_raw_const(86) };
pub const CANCELTIMER: LTerm = LTerm { value: immediate::make_atom_raw_const(87) };
pub const CEIL: LTerm = LTerm { value: immediate::make_atom_raw_const(88) };
pub const CHARACTERSTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(89) };
pub const CHARACTERSTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(90) };
pub const CHECKDIRTYPROCESSCODE: LTerm = LTerm { value: immediate::make_atom_raw_const(91) };
pub const CHECKOLDCODE: LTerm = LTerm { value: immediate::make_atom_raw_const(92) };
pub const CHECKPROCESSCODE: LTerm = LTerm { value: immediate::make_atom_raw_const(93) };
pub const CMPTERM: LTerm = LTerm { value: immediate::make_atom_raw_const(94) };
pub const COMPILE: LTerm = LTerm { value: immediate::make_atom_raw_const(95) };
pub const COMPILEPATTERN: LTerm = LTerm { value: immediate::make_atom_raw_const(96) };
pub const COPY: LTerm = LTerm { value: immediate::make_atom_raw_const(97) };
pub const COPYSHARED: LTerm = LTerm { value: immediate::make_atom_raw_const(98) };
pub const COS: LTerm = LTerm { value: immediate::make_atom_raw_const(99) };
pub const COSH: LTerm = LTerm { value: immediate::make_atom_raw_const(100) };
pub const CRC32: LTerm = LTerm { value: immediate::make_atom_raw_const(101) };
pub const CRC32COMBINE: LTerm = LTerm { value: immediate::make_atom_raw_const(102) };
pub const DATE: LTerm = LTerm { value: immediate::make_atom_raw_const(103) };
pub const DECODEPACKET: LTerm = LTerm { value: immediate::make_atom_raw_const(104) };
pub const DECODEUNSIGNED: LTerm = LTerm { value: immediate::make_atom_raw_const(105) };
pub const DELETE: LTerm = LTerm { value: immediate::make_atom_raw_const(106) };
pub const DELETEALLOBJECTS: LTerm = LTerm { value: immediate::make_atom_raw_const(107) };
pub const DELETEELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(108) };
pub const DELETEMODULE: LTerm = LTerm { value: immediate::make_atom_raw_const(109) };
pub const DELETEOBJECT: LTerm = LTerm { value: immediate::make_atom_raw_const(110) };
pub const DEMONITOR: LTerm = LTerm { value: immediate::make_atom_raw_const(111) };
pub const DFLAGUNICODEIO: LTerm = LTerm { value: immediate::make_atom_raw_const(112) };
pub const DIRTY: LTerm = LTerm { value: immediate::make_atom_raw_const(113) };
pub const DIRTYCPU: LTerm = LTerm { value: immediate::make_atom_raw_const(114) };
pub const DIRTYIO: LTerm = LTerm { value: immediate::make_atom_raw_const(115) };
pub const DISASSEMBLE: LTerm = LTerm { value: immediate::make_atom_raw_const(116) };
pub const DISPLAY: LTerm = LTerm { value: immediate::make_atom_raw_const(117) };
pub const DISPLAYNL: LTerm = LTerm { value: immediate::make_atom_raw_const(118) };
pub const DISPLAYSTRING: LTerm = LTerm { value: immediate::make_atom_raw_const(119) };
pub const DISTEXIT: LTerm = LTerm { value: immediate::make_atom_raw_const(120) };
pub const DISTEXTTOTERM: LTerm = LTerm { value: immediate::make_atom_raw_const(121) };
pub const DTAPPENDVMTAGDATA: LTerm = LTerm { value: immediate::make_atom_raw_const(122) };
pub const DTGETTAG: LTerm = LTerm { value: immediate::make_atom_raw_const(123) };
pub const DTGETTAGDATA: LTerm = LTerm { value: immediate::make_atom_raw_const(124) };
pub const DTPREPENDVMTAGDATA: LTerm = LTerm { value: immediate::make_atom_raw_const(125) };
pub const DTPUTTAG: LTerm = LTerm { value: immediate::make_atom_raw_const(126) };
pub const DTRESTORETAG: LTerm = LTerm { value: immediate::make_atom_raw_const(127) };
pub const DTSPREADTAG: LTerm = LTerm { value: immediate::make_atom_raw_const(128) };
pub const DUMPLINKS: LTerm = LTerm { value: immediate::make_atom_raw_const(129) };
pub const DUMPMONITORS: LTerm = LTerm { value: immediate::make_atom_raw_const(130) };
pub const ELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(131) };
pub const ENCODEUNSIGNED: LTerm = LTerm { value: immediate::make_atom_raw_const(132) };
pub const ERASE: LTerm = LTerm { value: immediate::make_atom_raw_const(133) };
pub const ERF: LTerm = LTerm { value: immediate::make_atom_raw_const(134) };
pub const ERFC: LTerm = LTerm { value: immediate::make_atom_raw_const(135) };
pub const EXP: LTerm = LTerm { value: immediate::make_atom_raw_const(136) };
pub const EXTERNALSIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(137) };
pub const FIND: LTerm = LTerm { value: immediate::make_atom_raw_const(138) };
pub const FINISHAFTERONLOAD: LTerm = LTerm { value: immediate::make_atom_raw_const(139) };
pub const FINISHLOADING: LTerm = LTerm { value: immediate::make_atom_raw_const(140) };
pub const FIRST: LTerm = LTerm { value: immediate::make_atom_raw_const(141) };
pub const FLATSIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(142) };
pub const FLOAT: LTerm = LTerm { value: immediate::make_atom_raw_const(143) };
pub const FLOATTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(144) };
pub const FLOATTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(145) };
pub const FLOOR: LTerm = LTerm { value: immediate::make_atom_raw_const(146) };
pub const FMOD: LTerm = LTerm { value: immediate::make_atom_raw_const(147) };
pub const FORMATERRORINT: LTerm = LTerm { value: immediate::make_atom_raw_const(148) };
pub const FROMLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(149) };
pub const FUNINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(150) };
pub const FUNINFOMFA: LTerm = LTerm { value: immediate::make_atom_raw_const(151) };
pub const FUNTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(152) };
pub const FUNCTIONEXPORTED: LTerm = LTerm { value: immediate::make_atom_raw_const(153) };
pub const GARBAGECOLLECT: LTerm = LTerm { value: immediate::make_atom_raw_const(154) };
pub const GET: LTerm = LTerm { value: immediate::make_atom_raw_const(155) };
pub const GETCHUNK: LTerm = LTerm { value: immediate::make_atom_raw_const(156) };
pub const GETINTERNALSTATE: LTerm = LTerm { value: immediate::make_atom_raw_const(157) };
pub const GETKEYS: LTerm = LTerm { value: immediate::make_atom_raw_const(158) };
pub const GETMODULEINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(159) };
pub const GETSTACKTRACE: LTerm = LTerm { value: immediate::make_atom_raw_const(160) };
pub const GETENV: LTerm = LTerm { value: immediate::make_atom_raw_const(161) };
pub const GETPID: LTerm = LTerm { value: immediate::make_atom_raw_const(162) };
pub const GIVEAWAY: LTerm = LTerm { value: immediate::make_atom_raw_const(163) };
pub const GROUPLEADER: LTerm = LTerm { value: immediate::make_atom_raw_const(164) };
pub const HALT: LTerm = LTerm { value: immediate::make_atom_raw_const(165) };
pub const HASPREPAREDCODEONLOAD: LTerm = LTerm { value: immediate::make_atom_raw_const(166) };
pub const HD: LTerm = LTerm { value: immediate::make_atom_raw_const(167) };
pub const HIBERNATE: LTerm = LTerm { value: immediate::make_atom_raw_const(168) };
pub const INFO: LTerm = LTerm { value: immediate::make_atom_raw_const(169) };
pub const INSERT: LTerm = LTerm { value: immediate::make_atom_raw_const(170) };
pub const INSERTELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(171) };
pub const INSERTNEW: LTerm = LTerm { value: immediate::make_atom_raw_const(172) };
pub const INSPECT: LTerm = LTerm { value: immediate::make_atom_raw_const(173) };
pub const INSTRUCTIONS: LTerm = LTerm { value: immediate::make_atom_raw_const(174) };
pub const INTEGERTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(175) };
pub const INTEGERTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(176) };
pub const INTERNALNAME2NATIVE: LTerm = LTerm { value: immediate::make_atom_raw_const(177) };
pub const INTERNALNATIVE2NAME: LTerm = LTerm { value: immediate::make_atom_raw_const(178) };
pub const INTERNALNORMALIZEUTF8: LTerm = LTerm { value: immediate::make_atom_raw_const(179) };
pub const INTERNALREQUESTALL: LTerm = LTerm { value: immediate::make_atom_raw_const(180) };
pub const IOLISTSIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(181) };
pub const IOLISTTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(182) };
pub const IOLISTTOIOVEC: LTerm = LTerm { value: immediate::make_atom_raw_const(183) };
pub const ISALIVE: LTerm = LTerm { value: immediate::make_atom_raw_const(184) };
pub const ISATOM: LTerm = LTerm { value: immediate::make_atom_raw_const(185) };
pub const ISBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(186) };
pub const ISBITSTRING: LTerm = LTerm { value: immediate::make_atom_raw_const(187) };
pub const ISBOOLEAN: LTerm = LTerm { value: immediate::make_atom_raw_const(188) };
pub const ISBUILTIN: LTerm = LTerm { value: immediate::make_atom_raw_const(189) };
pub const ISCOMPILEDMS: LTerm = LTerm { value: immediate::make_atom_raw_const(190) };
pub const ISFLOAT: LTerm = LTerm { value: immediate::make_atom_raw_const(191) };
pub const ISFUNCTION: LTerm = LTerm { value: immediate::make_atom_raw_const(192) };
pub const ISINTEGER: LTerm = LTerm { value: immediate::make_atom_raw_const(193) };
pub const ISKEY: LTerm = LTerm { value: immediate::make_atom_raw_const(194) };
pub const ISLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(195) };
pub const ISMAP: LTerm = LTerm { value: immediate::make_atom_raw_const(196) };
pub const ISMODULENATIVE: LTerm = LTerm { value: immediate::make_atom_raw_const(197) };
pub const ISNUMBER: LTerm = LTerm { value: immediate::make_atom_raw_const(198) };
pub const ISPID: LTerm = LTerm { value: immediate::make_atom_raw_const(199) };
pub const ISPORT: LTerm = LTerm { value: immediate::make_atom_raw_const(200) };
pub const ISPROCESSALIVE: LTerm = LTerm { value: immediate::make_atom_raw_const(201) };
pub const ISPROCESSEXECUTINGDIRTY: LTerm = LTerm { value: immediate::make_atom_raw_const(202) };
pub const ISRECORD: LTerm = LTerm { value: immediate::make_atom_raw_const(203) };
pub const ISREFERENCE: LTerm = LTerm { value: immediate::make_atom_raw_const(204) };
pub const ISSYSTEMPROCESS: LTerm = LTerm { value: immediate::make_atom_raw_const(205) };
pub const ISTRANSLATABLE: LTerm = LTerm { value: immediate::make_atom_raw_const(206) };
pub const ISTUPLE: LTerm = LTerm { value: immediate::make_atom_raw_const(207) };
pub const KEYFIND: LTerm = LTerm { value: immediate::make_atom_raw_const(208) };
pub const KEYMEMBER: LTerm = LTerm { value: immediate::make_atom_raw_const(209) };
pub const KEYS: LTerm = LTerm { value: immediate::make_atom_raw_const(210) };
pub const KEYSEARCH: LTerm = LTerm { value: immediate::make_atom_raw_const(211) };
pub const LAST: LTerm = LTerm { value: immediate::make_atom_raw_const(212) };
pub const LCNTCLEAR: LTerm = LTerm { value: immediate::make_atom_raw_const(213) };
pub const LCNTCOLLECT: LTerm = LTerm { value: immediate::make_atom_raw_const(214) };
pub const LCNTCONTROL: LTerm = LTerm { value: immediate::make_atom_raw_const(215) };
pub const LENGTH: LTerm = LTerm { value: immediate::make_atom_raw_const(216) };
pub const LINK: LTerm = LTerm { value: immediate::make_atom_raw_const(217) };
pub const LISTTOATOM: LTerm = LTerm { value: immediate::make_atom_raw_const(218) };
pub const LISTTOBIN: LTerm = LTerm { value: immediate::make_atom_raw_const(219) };
pub const LISTTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(220) };
pub const LISTTOBITSTRING: LTerm = LTerm { value: immediate::make_atom_raw_const(221) };
pub const LISTTOEXISTINGATOM: LTerm = LTerm { value: immediate::make_atom_raw_const(222) };
pub const LISTTOFLOAT: LTerm = LTerm { value: immediate::make_atom_raw_const(223) };
pub const LISTTOINTEGER: LTerm = LTerm { value: immediate::make_atom_raw_const(224) };
pub const LISTTOPID: LTerm = LTerm { value: immediate::make_atom_raw_const(225) };
pub const LISTTOPORT: LTerm = LTerm { value: immediate::make_atom_raw_const(226) };
pub const LISTTOREF: LTerm = LTerm { value: immediate::make_atom_raw_const(227) };
pub const LISTTOTUPLE: LTerm = LTerm { value: immediate::make_atom_raw_const(228) };
pub const LOADNIF: LTerm = LTerm { value: immediate::make_atom_raw_const(229) };
pub const LOADED: LTerm = LTerm { value: immediate::make_atom_raw_const(230) };
pub const LOADEDDRIVERS: LTerm = LTerm { value: immediate::make_atom_raw_const(231) };
pub const LOCALTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(232) };
pub const LOCALTIMETOUNIVERSALTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(233) };
pub const LOG: LTerm = LTerm { value: immediate::make_atom_raw_const(234) };
pub const LOG10: LTerm = LTerm { value: immediate::make_atom_raw_const(235) };
pub const LOG2: LTerm = LTerm { value: immediate::make_atom_raw_const(236) };
pub const LONGESTCOMMONPREFIX: LTerm = LTerm { value: immediate::make_atom_raw_const(237) };
pub const LONGESTCOMMONSUFFIX: LTerm = LTerm { value: immediate::make_atom_raw_const(238) };
pub const LOOKUP: LTerm = LTerm { value: immediate::make_atom_raw_const(239) };
pub const LOOKUPELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(240) };
pub const MAKEFUN: LTerm = LTerm { value: immediate::make_atom_raw_const(241) };
pub const MAKEREF: LTerm = LTerm { value: immediate::make_atom_raw_const(242) };
pub const MAKESTUBMODULE: LTerm = LTerm { value: immediate::make_atom_raw_const(243) };
pub const MAKETUPLE: LTerm = LTerm { value: immediate::make_atom_raw_const(244) };
pub const MAPHASHMAPCHILDREN: LTerm = LTerm { value: immediate::make_atom_raw_const(245) };
pub const MAPINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(246) };
pub const MAPSIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(247) };
pub const MAPTOTUPLEKEYS: LTerm = LTerm { value: immediate::make_atom_raw_const(248) };
pub const MAPSTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(249) };
pub const MATCH: LTerm = LTerm { value: immediate::make_atom_raw_const(250) };
pub const MATCHOBJECT: LTerm = LTerm { value: immediate::make_atom_raw_const(251) };
pub const MATCHSPECCOMPILE: LTerm = LTerm { value: immediate::make_atom_raw_const(252) };
pub const MATCHSPECRUNR: LTerm = LTerm { value: immediate::make_atom_raw_const(253) };
pub const MATCHSPECTEST: LTerm = LTerm { value: immediate::make_atom_raw_const(254) };
pub const MATCHES: LTerm = LTerm { value: immediate::make_atom_raw_const(255) };
pub const MD5: LTerm = LTerm { value: immediate::make_atom_raw_const(256) };
pub const MD5FINAL: LTerm = LTerm { value: immediate::make_atom_raw_const(257) };
pub const MD5INIT: LTerm = LTerm { value: immediate::make_atom_raw_const(258) };
pub const MD5UPDATE: LTerm = LTerm { value: immediate::make_atom_raw_const(259) };
pub const MEMBER: LTerm = LTerm { value: immediate::make_atom_raw_const(260) };
pub const MERGE: LTerm = LTerm { value: immediate::make_atom_raw_const(261) };
pub const MODULELOADED: LTerm = LTerm { value: immediate::make_atom_raw_const(262) };
pub const MODULEMD5: LTerm = LTerm { value: immediate::make_atom_raw_const(263) };
pub const MONITOR: LTerm = LTerm { value: immediate::make_atom_raw_const(264) };
pub const MONITORNODE: LTerm = LTerm { value: immediate::make_atom_raw_const(265) };
pub const MONOTONICTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(266) };
pub const NATIVENAMEENCODING: LTerm = LTerm { value: immediate::make_atom_raw_const(267) };
pub const NEW: LTerm = LTerm { value: immediate::make_atom_raw_const(268) };
pub const NEXT: LTerm = LTerm { value: immediate::make_atom_raw_const(269) };
pub const NIFERROR: LTerm = LTerm { value: immediate::make_atom_raw_const(270) };
pub const NODE: LTerm = LTerm { value: immediate::make_atom_raw_const(271) };
pub const NODES: LTerm = LTerm { value: immediate::make_atom_raw_const(272) };
pub const NOW: LTerm = LTerm { value: immediate::make_atom_raw_const(273) };
pub const OPENPORT: LTerm = LTerm { value: immediate::make_atom_raw_const(274) };
pub const BINARYBINARYPART2: LTerm = LTerm { value: immediate::make_atom_raw_const(275) };
pub const PERFCOUNTER: LTerm = LTerm { value: immediate::make_atom_raw_const(276) };
pub const PERFCOUNTERUNIT: LTerm = LTerm { value: immediate::make_atom_raw_const(277) };
pub const PHASH: LTerm = LTerm { value: immediate::make_atom_raw_const(278) };
pub const PHASH2: LTerm = LTerm { value: immediate::make_atom_raw_const(279) };
pub const PIDTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(280) };
pub const PORTCALL: LTerm = LTerm { value: immediate::make_atom_raw_const(281) };
pub const PORTCLOSE: LTerm = LTerm { value: immediate::make_atom_raw_const(282) };
pub const PORTCOMMAND: LTerm = LTerm { value: immediate::make_atom_raw_const(283) };
pub const PORTCONNECT: LTerm = LTerm { value: immediate::make_atom_raw_const(284) };
pub const PORTCONTROL: LTerm = LTerm { value: immediate::make_atom_raw_const(285) };
pub const PORTGETDATA: LTerm = LTerm { value: immediate::make_atom_raw_const(286) };
pub const PORTINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(287) };
pub const PORTSETDATA: LTerm = LTerm { value: immediate::make_atom_raw_const(288) };
pub const PORTTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(289) };
pub const PORTS: LTerm = LTerm { value: immediate::make_atom_raw_const(290) };
pub const POSIXTIMETOUNIVERSALTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(291) };
pub const POW: LTerm = LTerm { value: immediate::make_atom_raw_const(292) };
pub const PRELOADED: LTerm = LTerm { value: immediate::make_atom_raw_const(293) };
pub const PREPARELOADING: LTerm = LTerm { value: immediate::make_atom_raw_const(294) };
pub const PREV: LTerm = LTerm { value: immediate::make_atom_raw_const(295) };
pub const PRINTABLERANGE: LTerm = LTerm { value: immediate::make_atom_raw_const(296) };
pub const PROCESSDISPLAY: LTerm = LTerm { value: immediate::make_atom_raw_const(297) };
pub const PROCESSFLAG: LTerm = LTerm { value: immediate::make_atom_raw_const(298) };
pub const PROCESSINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(299) };
pub const PROCESSES: LTerm = LTerm { value: immediate::make_atom_raw_const(300) };
pub const PURGEMODULE: LTerm = LTerm { value: immediate::make_atom_raw_const(301) };
pub const PUT: LTerm = LTerm { value: immediate::make_atom_raw_const(302) };
pub const PUTENV: LTerm = LTerm { value: immediate::make_atom_raw_const(303) };
pub const RAISE3: LTerm = LTerm { value: immediate::make_atom_raw_const(304) };
pub const READTIMER: LTerm = LTerm { value: immediate::make_atom_raw_const(305) };
pub const REFTOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(306) };
pub const REFERENCEDBYTESIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(307) };
pub const REGISTER: LTerm = LTerm { value: immediate::make_atom_raw_const(308) };
pub const REGISTERED: LTerm = LTerm { value: immediate::make_atom_raw_const(309) };
pub const RELEASELITERALAREASWITCH: LTerm = LTerm { value: immediate::make_atom_raw_const(310) };
pub const REMOVE: LTerm = LTerm { value: immediate::make_atom_raw_const(311) };
pub const RENAME: LTerm = LTerm { value: immediate::make_atom_raw_const(312) };
pub const REQUESTSYSTEMTASK: LTerm = LTerm { value: immediate::make_atom_raw_const(313) };
pub const RESUMEPROCESS: LTerm = LTerm { value: immediate::make_atom_raw_const(314) };
pub const REVERSE: LTerm = LTerm { value: immediate::make_atom_raw_const(315) };
pub const ROUND: LTerm = LTerm { value: immediate::make_atom_raw_const(316) };
pub const RUN: LTerm = LTerm { value: immediate::make_atom_raw_const(317) };
pub const SAFEFIXTABLE: LTerm = LTerm { value: immediate::make_atom_raw_const(318) };
pub const SAME: LTerm = LTerm { value: immediate::make_atom_raw_const(319) };
pub const SELECT: LTerm = LTerm { value: immediate::make_atom_raw_const(320) };
pub const SELECTCOUNT: LTerm = LTerm { value: immediate::make_atom_raw_const(321) };
pub const SELECTDELETE: LTerm = LTerm { value: immediate::make_atom_raw_const(322) };
pub const SELECTREPLACE: LTerm = LTerm { value: immediate::make_atom_raw_const(323) };
pub const SELECTREVERSE: LTerm = LTerm { value: immediate::make_atom_raw_const(324) };
pub const SELF: LTerm = LTerm { value: immediate::make_atom_raw_const(325) };
pub const SEND: LTerm = LTerm { value: immediate::make_atom_raw_const(326) };
pub const SENDAFTER: LTerm = LTerm { value: immediate::make_atom_raw_const(327) };
pub const SEQTRACE: LTerm = LTerm { value: immediate::make_atom_raw_const(328) };
pub const SEQTRACEINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(329) };
pub const SEQTRACEPRINT: LTerm = LTerm { value: immediate::make_atom_raw_const(330) };
pub const SETINTERNALSTATE: LTerm = LTerm { value: immediate::make_atom_raw_const(331) };
pub const SETSIGNAL: LTerm = LTerm { value: immediate::make_atom_raw_const(332) };
pub const SETELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(333) };
pub const SETNODE: LTerm = LTerm { value: immediate::make_atom_raw_const(334) };
pub const SETOPTS: LTerm = LTerm { value: immediate::make_atom_raw_const(335) };
pub const SIN: LTerm = LTerm { value: immediate::make_atom_raw_const(336) };
pub const SINH: LTerm = LTerm { value: immediate::make_atom_raw_const(337) };
pub const SIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(338) };
pub const SIZESHARED: LTerm = LTerm { value: immediate::make_atom_raw_const(339) };
pub const SLOT: LTerm = LTerm { value: immediate::make_atom_raw_const(340) };
pub const SPAWN: LTerm = LTerm { value: immediate::make_atom_raw_const(341) };
pub const SPAWNLINK: LTerm = LTerm { value: immediate::make_atom_raw_const(342) };
pub const SPAWNOPT: LTerm = LTerm { value: immediate::make_atom_raw_const(343) };
pub const SPLIT: LTerm = LTerm { value: immediate::make_atom_raw_const(344) };
pub const SPLITBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(345) };
pub const SQRT: LTerm = LTerm { value: immediate::make_atom_raw_const(346) };
pub const STARTTIMER: LTerm = LTerm { value: immediate::make_atom_raw_const(347) };
pub const STATISTICS: LTerm = LTerm { value: immediate::make_atom_raw_const(348) };
pub const SUBTRACT: LTerm = LTerm { value: immediate::make_atom_raw_const(349) };
pub const SUSPENDPROCESS: LTerm = LTerm { value: immediate::make_atom_raw_const(350) };
pub const SYSTEMCHECK: LTerm = LTerm { value: immediate::make_atom_raw_const(351) };
pub const SYSTEMFLAG: LTerm = LTerm { value: immediate::make_atom_raw_const(352) };
pub const SYSTEMINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(353) };
pub const SYSTEMMONITOR: LTerm = LTerm { value: immediate::make_atom_raw_const(354) };
pub const SYSTEMPROFILE: LTerm = LTerm { value: immediate::make_atom_raw_const(355) };
pub const SYSTEMTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(356) };
pub const TAKE: LTerm = LTerm { value: immediate::make_atom_raw_const(357) };
pub const TAN: LTerm = LTerm { value: immediate::make_atom_raw_const(358) };
pub const TANH: LTerm = LTerm { value: immediate::make_atom_raw_const(359) };
pub const TERMTOBINARY: LTerm = LTerm { value: immediate::make_atom_raw_const(360) };
pub const TERMTYPE: LTerm = LTerm { value: immediate::make_atom_raw_const(361) };
pub const TIME: LTerm = LTerm { value: immediate::make_atom_raw_const(362) };
pub const TIMEOFFSET: LTerm = LTerm { value: immediate::make_atom_raw_const(363) };
pub const TIMEUNIT: LTerm = LTerm { value: immediate::make_atom_raw_const(364) };
pub const TIMESTAMP: LTerm = LTerm { value: immediate::make_atom_raw_const(365) };
pub const TL: LTerm = LTerm { value: immediate::make_atom_raw_const(366) };
pub const TOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(367) };
pub const TRACE: LTerm = LTerm { value: immediate::make_atom_raw_const(368) };
pub const TRACEDELIVERED: LTerm = LTerm { value: immediate::make_atom_raw_const(369) };
pub const TRACEINFO: LTerm = LTerm { value: immediate::make_atom_raw_const(370) };
pub const TRACEPATTERN: LTerm = LTerm { value: immediate::make_atom_raw_const(371) };
pub const TRUNC: LTerm = LTerm { value: immediate::make_atom_raw_const(372) };
pub const TRYLOAD: LTerm = LTerm { value: immediate::make_atom_raw_const(373) };
pub const TRYUNLOAD: LTerm = LTerm { value: immediate::make_atom_raw_const(374) };
pub const TUPLESIZE: LTerm = LTerm { value: immediate::make_atom_raw_const(375) };
pub const TUPLETOLIST: LTerm = LTerm { value: immediate::make_atom_raw_const(376) };
pub const UNIQUEINTEGER: LTerm = LTerm { value: immediate::make_atom_raw_const(377) };
pub const UNIVERSALTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(378) };
pub const UNIVERSALTIMETOLOCALTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(379) };
pub const UNIVERSALTIMETOPOSIXTIME: LTerm = LTerm { value: immediate::make_atom_raw_const(380) };
pub const UNLINK: LTerm = LTerm { value: immediate::make_atom_raw_const(381) };
pub const UNREGISTER: LTerm = LTerm { value: immediate::make_atom_raw_const(382) };
pub const UNSETENV: LTerm = LTerm { value: immediate::make_atom_raw_const(383) };
pub const UPDATE: LTerm = LTerm { value: immediate::make_atom_raw_const(384) };
pub const UPDATECOUNTER: LTerm = LTerm { value: immediate::make_atom_raw_const(385) };
pub const UPDATEELEMENT: LTerm = LTerm { value: immediate::make_atom_raw_const(386) };
pub const VALUES: LTerm = LTerm { value: immediate::make_atom_raw_const(387) };
pub const VERSION: LTerm = LTerm { value: immediate::make_atom_raw_const(388) };
pub const WARNINGMAP: LTerm = LTerm { value: immediate::make_atom_raw_const(389) };
pub const WHEREIS: LTerm = LTerm { value: immediate::make_atom_raw_const(390) };

pub static ATOM_INIT_NAMES: &'static [&'static str] = &[
  "apply", // id=0
  "badarg", // id=1
  "badarith", // id=2
  "badarity", // id=3
  "badfun", // id=4
  "badmatch", // id=5
  "case_clause", // id=6
  "erlang", // id=7
  "error", // id=8
  "exit", // id=9
  "false", // id=10
  "function_clause", // id=11
  "high", // id=12
  "if_clause", // id=13
  "init", // id=14
  "kill", // id=15
  "killed", // id=16
  "low", // id=17
  "nocatch", // id=18
  "normal", // id=19
  "ok", // id=20
  "system_limit", // id=21
  "throw", // id=22
  "trap_exit", // id=23
  "true", // id=24
  "undef", // id=25
  "undefined", // id=26
  "g", // id=27
  "b", // id=28
  "u", // id=29
  "!", // id=30
  "*", // id=31
  "+", // id=32
  "++", // id=33
  "-", // id=34
  "--", // id=35
  "/", // id=36
  "/=", // id=37
  "<", // id=38
  "=/=", // id=39
  "=:=", // id=40
  "=<", // id=41
  "==", // id=42
  ">", // id=43
  ">=", // id=44
  "and", // id=45
  "band", // id=46
  "bnot", // id=47
  "bor", // id=48
  "bsl", // id=49
  "bsr", // id=50
  "bxor", // id=51
  "div", // id=52
  "not", // id=53
  "or", // id=54
  "rem", // id=55
  "xor", // id=56
  "abs", // id=57
  "acos", // id=58
  "acosh", // id=59
  "adler32", // id=60
  "adler32_combine", // id=61
  "append", // id=62
  "append_element", // id=63
  "asin", // id=64
  "asinh", // id=65
  "at", // id=66
  "atan", // id=67
  "atan2", // id=68
  "atanh", // id=69
  "atom_to_binary", // id=70
  "atom_to_list", // id=71
  "bin_is_7bit", // id=72
  "bin_to_list", // id=73
  "binary_part", // id=74
  "binary_to_atom", // id=75
  "binary_to_existing_atom", // id=76
  "binary_to_float", // id=77
  "binary_to_integer", // id=78
  "binary_to_list", // id=79
  "binary_to_term", // id=80
  "bit_size", // id=81
  "bitstring_to_list", // id=82
  "breakpoint", // id=83
  "bump_reductions", // id=84
  "byte_size", // id=85
  "call_on_load_function", // id=86
  "cancel_timer", // id=87
  "ceil", // id=88
  "characters_to_binary", // id=89
  "characters_to_list", // id=90
  "check_dirty_process_code", // id=91
  "check_old_code", // id=92
  "check_process_code", // id=93
  "cmp_term", // id=94
  "compile", // id=95
  "compile_pattern", // id=96
  "copy", // id=97
  "copy_shared", // id=98
  "cos", // id=99
  "cosh", // id=100
  "crc32", // id=101
  "crc32_combine", // id=102
  "date", // id=103
  "decode_packet", // id=104
  "decode_unsigned", // id=105
  "delete", // id=106
  "delete_all_objects", // id=107
  "delete_element", // id=108
  "delete_module", // id=109
  "delete_object", // id=110
  "demonitor", // id=111
  "dflag_unicode_io", // id=112
  "dirty", // id=113
  "dirty_cpu", // id=114
  "dirty_io", // id=115
  "disassemble", // id=116
  "display", // id=117
  "display_nl", // id=118
  "display_string", // id=119
  "dist_exit", // id=120
  "dist_ext_to_term", // id=121
  "dt_append_vm_tag_data", // id=122
  "dt_get_tag", // id=123
  "dt_get_tag_data", // id=124
  "dt_prepend_vm_tag_data", // id=125
  "dt_put_tag", // id=126
  "dt_restore_tag", // id=127
  "dt_spread_tag", // id=128
  "dump_links", // id=129
  "dump_monitors", // id=130
  "element", // id=131
  "encode_unsigned", // id=132
  "erase", // id=133
  "erf", // id=134
  "erfc", // id=135
  "exp", // id=136
  "external_size", // id=137
  "find", // id=138
  "finish_after_on_load", // id=139
  "finish_loading", // id=140
  "first", // id=141
  "flat_size", // id=142
  "float", // id=143
  "float_to_binary", // id=144
  "float_to_list", // id=145
  "floor", // id=146
  "fmod", // id=147
  "format_error_int", // id=148
  "from_list", // id=149
  "fun_info", // id=150
  "fun_info_mfa", // id=151
  "fun_to_list", // id=152
  "function_exported", // id=153
  "garbage_collect", // id=154
  "get", // id=155
  "get_chunk", // id=156
  "get_internal_state", // id=157
  "get_keys", // id=158
  "get_module_info", // id=159
  "get_stacktrace", // id=160
  "getenv", // id=161
  "getpid", // id=162
  "give_away", // id=163
  "group_leader", // id=164
  "halt", // id=165
  "has_prepared_code_on_load", // id=166
  "hd", // id=167
  "hibernate", // id=168
  "info", // id=169
  "insert", // id=170
  "insert_element", // id=171
  "insert_new", // id=172
  "inspect", // id=173
  "instructions", // id=174
  "integer_to_binary", // id=175
  "integer_to_list", // id=176
  "internal_name2native", // id=177
  "internal_native2name", // id=178
  "internal_normalize_utf8", // id=179
  "internal_request_all", // id=180
  "iolist_size", // id=181
  "iolist_to_binary", // id=182
  "iolist_to_iovec", // id=183
  "is_alive", // id=184
  "is_atom", // id=185
  "is_binary", // id=186
  "is_bitstring", // id=187
  "is_boolean", // id=188
  "is_builtin", // id=189
  "is_compiled_ms", // id=190
  "is_float", // id=191
  "is_function", // id=192
  "is_integer", // id=193
  "is_key", // id=194
  "is_list", // id=195
  "is_map", // id=196
  "is_module_native", // id=197
  "is_number", // id=198
  "is_pid", // id=199
  "is_port", // id=200
  "is_process_alive", // id=201
  "is_process_executing_dirty", // id=202
  "is_record", // id=203
  "is_reference", // id=204
  "is_system_process", // id=205
  "is_translatable", // id=206
  "is_tuple", // id=207
  "keyfind", // id=208
  "keymember", // id=209
  "keys", // id=210
  "keysearch", // id=211
  "last", // id=212
  "lcnt_clear", // id=213
  "lcnt_collect", // id=214
  "lcnt_control", // id=215
  "length", // id=216
  "link", // id=217
  "list_to_atom", // id=218
  "list_to_bin", // id=219
  "list_to_binary", // id=220
  "list_to_bitstring", // id=221
  "list_to_existing_atom", // id=222
  "list_to_float", // id=223
  "list_to_integer", // id=224
  "list_to_pid", // id=225
  "list_to_port", // id=226
  "list_to_ref", // id=227
  "list_to_tuple", // id=228
  "load_nif", // id=229
  "loaded", // id=230
  "loaded_drivers", // id=231
  "localtime", // id=232
  "localtime_to_universaltime", // id=233
  "log", // id=234
  "log10", // id=235
  "log2", // id=236
  "longest_common_prefix", // id=237
  "longest_common_suffix", // id=238
  "lookup", // id=239
  "lookup_element", // id=240
  "make_fun", // id=241
  "make_ref", // id=242
  "make_stub_module", // id=243
  "make_tuple", // id=244
  "map_hashmap_children", // id=245
  "map_info", // id=246
  "map_size", // id=247
  "map_to_tuple_keys", // id=248
  "maps_to_list", // id=249
  "match", // id=250
  "match_object", // id=251
  "match_spec_compile", // id=252
  "match_spec_run_r", // id=253
  "match_spec_test", // id=254
  "matches", // id=255
  "md5", // id=256
  "md5_final", // id=257
  "md5_init", // id=258
  "md5_update", // id=259
  "member", // id=260
  "merge", // id=261
  "module_loaded", // id=262
  "module_md5", // id=263
  "monitor", // id=264
  "monitor_node", // id=265
  "monotonic_time", // id=266
  "native_name_encoding", // id=267
  "new", // id=268
  "next", // id=269
  "nif_error", // id=270
  "node", // id=271
  "nodes", // id=272
  "now", // id=273
  "open_port", // id=274
  "part", // id=275
  "perf_counter", // id=276
  "perf_counter_unit", // id=277
  "phash", // id=278
  "phash2", // id=279
  "pid_to_list", // id=280
  "port_call", // id=281
  "port_close", // id=282
  "port_command", // id=283
  "port_connect", // id=284
  "port_control", // id=285
  "port_get_data", // id=286
  "port_info", // id=287
  "port_set_data", // id=288
  "port_to_list", // id=289
  "ports", // id=290
  "posixtime_to_universaltime", // id=291
  "pow", // id=292
  "pre_loaded", // id=293
  "prepare_loading", // id=294
  "prev", // id=295
  "printable_range", // id=296
  "process_display", // id=297
  "process_flag", // id=298
  "process_info", // id=299
  "processes", // id=300
  "purge_module", // id=301
  "put", // id=302
  "putenv", // id=303
  "raise", // id=304
  "read_timer", // id=305
  "ref_to_list", // id=306
  "referenced_byte_size", // id=307
  "register", // id=308
  "registered", // id=309
  "release_literal_area_switch", // id=310
  "remove", // id=311
  "rename", // id=312
  "request_system_task", // id=313
  "resume_process", // id=314
  "reverse", // id=315
  "round", // id=316
  "run", // id=317
  "safe_fixtable", // id=318
  "same", // id=319
  "select", // id=320
  "select_count", // id=321
  "select_delete", // id=322
  "select_replace", // id=323
  "select_reverse", // id=324
  "self", // id=325
  "send", // id=326
  "send_after", // id=327
  "seq_trace", // id=328
  "seq_trace_info", // id=329
  "seq_trace_print", // id=330
  "set_internal_state", // id=331
  "set_signal", // id=332
  "setelement", // id=333
  "setnode", // id=334
  "setopts", // id=335
  "sin", // id=336
  "sinh", // id=337
  "size", // id=338
  "size_shared", // id=339
  "slot", // id=340
  "spawn", // id=341
  "spawn_link", // id=342
  "spawn_opt", // id=343
  "split", // id=344
  "split_binary", // id=345
  "sqrt", // id=346
  "start_timer", // id=347
  "statistics", // id=348
  "subtract", // id=349
  "suspend_process", // id=350
  "system_check", // id=351
  "system_flag", // id=352
  "system_info", // id=353
  "system_monitor", // id=354
  "system_profile", // id=355
  "system_time", // id=356
  "take", // id=357
  "tan", // id=358
  "tanh", // id=359
  "term_to_binary", // id=360
  "term_type", // id=361
  "time", // id=362
  "time_offset", // id=363
  "time_unit", // id=364
  "timestamp", // id=365
  "tl", // id=366
  "to_list", // id=367
  "trace", // id=368
  "trace_delivered", // id=369
  "trace_info", // id=370
  "trace_pattern", // id=371
  "trunc", // id=372
  "try_load", // id=373
  "try_unload", // id=374
  "tuple_size", // id=375
  "tuple_to_list", // id=376
  "unique_integer", // id=377
  "universaltime", // id=378
  "universaltime_to_localtime", // id=379
  "universaltime_to_posixtime", // id=380
  "unlink", // id=381
  "unregister", // id=382
  "unsetenv", // id=383
  "update", // id=384
  "update_counter", // id=385
  "update_element", // id=386
  "values", // id=387
  "version", // id=388
  "warning_map", // id=389
  "whereis", // id=390
];
