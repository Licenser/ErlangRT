//! Generated by codegen/create_vm_dispatch.py
//! Dispatch for all opcode types.
//! Config used: OTP20 
#![allow(dead_code)]

use beam::gen_op;
use beam::opcodes::*;
use defs::{Word, DispatchResult};
use emulator::code::opcode::RawOpcode;
use emulator::heap::Heap;
use emulator::runtime_ctx::Context;


#[inline(always)]
pub fn dispatch_op_inline(op: RawOpcode, ctx: &mut Context, heap: &mut Heap) -> DispatchResult {
  match op {

    gen_op::OPCODE_CALL => { return opcode_call(ctx, heap) },
    gen_op::OPCODE_CALL_LAST => { return opcode_call_last(ctx, heap) },
    gen_op::OPCODE_CALL_ONLY => { return opcode_call_only(ctx, heap) },
    gen_op::OPCODE_ALLOCATE => { return opcode_allocate(ctx, heap) },
    gen_op::OPCODE_ALLOCATE_ZERO => { return opcode_allocate_zero(ctx, heap) },
    other => panic!("vm_dispatch: Opcode {:?} '{}' not implemented", 
                other, gen_op::opcode_name(other)),   
  }
}

