//! Generated by `codegen/create_vm_dispatch.py`
//! Dispatch for all opcode types.
//! Config used: OTP20
#![allow(dead_code)]

use beam::gen_op;
use beam::opcodes::*;
use defs::{DispatchResult};
use emulator::code::opcode::RawOpcode;
use emulator::heap::Heap;
use emulator::runtime_ctx::Context;


#[inline]
pub fn dispatch_op_inline(op: RawOpcode, ctx: &mut Context, heap: &mut Heap) -> DispatchResult {
  match op {

    gen_op::OPCODE_FUNC_INFO => { return opcode_func_info(ctx, heap) },
    gen_op::OPCODE_CALL => { return opcode_call(ctx, heap) },
    gen_op::OPCODE_CALL_ONLY => { return opcode_call_only(ctx, heap) },
    gen_op::OPCODE_ALLOCATE => { return opcode_allocate(ctx, heap) },
    gen_op::OPCODE_ALLOCATE_ZERO => { return opcode_allocate_zero(ctx, heap) },
    gen_op::OPCODE_TEST_HEAP => { return opcode_test_heap(ctx, heap) },
    gen_op::OPCODE_RETURN => { return opcode_return(ctx, heap) },
    gen_op::OPCODE_IS_NIL => { return opcode_is_nil(ctx, heap) },
    gen_op::OPCODE_IS_NONEMPTY_LIST => { return opcode_is_nonempty_list(ctx, heap) },
    gen_op::OPCODE_MOVE => { return opcode_move(ctx, heap) },
    gen_op::OPCODE_GET_LIST => { return opcode_get_list(ctx, heap) },
    gen_op::OPCODE_CALL_EXT_ONLY => { return opcode_call_ext_only(ctx, heap) },
    other => unknown_opcode(other, ctx),
  }
  DispatchResult::Yield
}

