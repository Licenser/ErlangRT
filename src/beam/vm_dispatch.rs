//! Generated by codegen/create_vm_dispatch.py
//! Dispatch for all opcode types.
//! Config used: OTP20 
#![allow(dead_code)]

use beam::gen_op::OPCODE;
use emulator::runtime_ctx::Context;
use defs::Word;


#[inline(always)]
pub fn dispatch_op_inline(op: Word, ctx: &mut Context) {
  match op {

    x if x == OPCODE::Label as Word => {},
    x if x == OPCODE::FuncInfo as Word => {},
    x if x == OPCODE::IntCodeEnd as Word => {},
    x if x == OPCODE::Call as Word => {},
    x if x == OPCODE::CallLast as Word => {},
    x if x == OPCODE::CallOnly as Word => {},
    x if x == OPCODE::CallExt as Word => {},
    x if x == OPCODE::CallExtLast as Word => {},
    x if x == OPCODE::Bif0 as Word => {},
    x if x == OPCODE::Bif1 as Word => {},
    x if x == OPCODE::Bif2 as Word => {},
    x if x == OPCODE::Allocate as Word => {},
    x if x == OPCODE::AllocateHeap as Word => {},
    x if x == OPCODE::AllocateZero as Word => {},
    x if x == OPCODE::AllocateHeapZero as Word => {},
    x if x == OPCODE::TestHeap as Word => {},
    x if x == OPCODE::Init as Word => {},
    x if x == OPCODE::Deallocate as Word => {},
    x if x == OPCODE::Return as Word => {},
    x if x == OPCODE::Send as Word => {},
    x if x == OPCODE::RemoveMessage as Word => {},
    x if x == OPCODE::Timeout as Word => {},
    x if x == OPCODE::LoopRec as Word => {},
    x if x == OPCODE::LoopRecEnd as Word => {},
    x if x == OPCODE::Wait as Word => {},
    x if x == OPCODE::WaitTimeout as Word => {},
    x if x == OPCODE::MPlus as Word => {},
    x if x == OPCODE::MMinus as Word => {},
    x if x == OPCODE::MTimes as Word => {},
    x if x == OPCODE::MDiv as Word => {},
    x if x == OPCODE::IntDiv as Word => {},
    x if x == OPCODE::IntRem as Word => {},
    x if x == OPCODE::IntBand as Word => {},
    x if x == OPCODE::IntBor as Word => {},
    x if x == OPCODE::IntBxor as Word => {},
    x if x == OPCODE::IntBsl as Word => {},
    x if x == OPCODE::IntBsr as Word => {},
    x if x == OPCODE::IntBnot as Word => {},
    x if x == OPCODE::IsLt as Word => {},
    x if x == OPCODE::IsGe as Word => {},
    x if x == OPCODE::IsEq as Word => {},
    x if x == OPCODE::IsNe as Word => {},
    x if x == OPCODE::IsEqExact as Word => {},
    x if x == OPCODE::IsNeExact as Word => {},
    x if x == OPCODE::IsInteger as Word => {},
    x if x == OPCODE::IsFloat as Word => {},
    x if x == OPCODE::IsNumber as Word => {},
    x if x == OPCODE::IsAtom as Word => {},
    x if x == OPCODE::IsPid as Word => {},
    x if x == OPCODE::IsReference as Word => {},
    x if x == OPCODE::IsPort as Word => {},
    x if x == OPCODE::IsNil as Word => {},
    x if x == OPCODE::IsBinary as Word => {},
    x if x == OPCODE::IsConstant as Word => {},
    x if x == OPCODE::IsList as Word => {},
    x if x == OPCODE::IsNonemptyList as Word => {},
    x if x == OPCODE::IsTuple as Word => {},
    x if x == OPCODE::TestArity as Word => {},
    x if x == OPCODE::SelectVal as Word => {},
    x if x == OPCODE::SelectTupleArity as Word => {},
    x if x == OPCODE::Jump as Word => {},
    x if x == OPCODE::Catch as Word => {},
    x if x == OPCODE::CatchEnd as Word => {},
    x if x == OPCODE::Move as Word => {},
    x if x == OPCODE::GetList as Word => {},
    x if x == OPCODE::GetTupleElement as Word => {},
    x if x == OPCODE::SetTupleElement as Word => {},
    x if x == OPCODE::PutString as Word => {},
    x if x == OPCODE::PutList as Word => {},
    x if x == OPCODE::PutTuple as Word => {},
    x if x == OPCODE::Put as Word => {},
    x if x == OPCODE::Badmatch as Word => {},
    x if x == OPCODE::IfEnd as Word => {},
    x if x == OPCODE::CaseEnd as Word => {},
    x if x == OPCODE::CallFun as Word => {},
    x if x == OPCODE::MakeFun as Word => {},
    x if x == OPCODE::IsFunction as Word => {},
    x if x == OPCODE::CallExtOnly as Word => {},
    x if x == OPCODE::BsStartMatch as Word => {},
    x if x == OPCODE::BsGetInteger as Word => {},
    x if x == OPCODE::BsGetFloat as Word => {},
    x if x == OPCODE::BsGetBinary as Word => {},
    x if x == OPCODE::BsSkipBits as Word => {},
    x if x == OPCODE::BsTestTail as Word => {},
    x if x == OPCODE::BsSave as Word => {},
    x if x == OPCODE::BsRestore as Word => {},
    x if x == OPCODE::BsInit as Word => {},
    x if x == OPCODE::BsFinal as Word => {},
    x if x == OPCODE::BsPutInteger as Word => {},
    x if x == OPCODE::BsPutBinary as Word => {},
    x if x == OPCODE::BsPutFloat as Word => {},
    x if x == OPCODE::BsPutString as Word => {},
    x if x == OPCODE::BsNeedBuf as Word => {},
    x if x == OPCODE::Fclearerror as Word => {},
    x if x == OPCODE::Fcheckerror as Word => {},
    x if x == OPCODE::Fmove as Word => {},
    x if x == OPCODE::Fconv as Word => {},
    x if x == OPCODE::Fadd as Word => {},
    x if x == OPCODE::Fsub as Word => {},
    x if x == OPCODE::Fmul as Word => {},
    x if x == OPCODE::Fdiv as Word => {},
    x if x == OPCODE::Fnegate as Word => {},
    x if x == OPCODE::MakeFun2 as Word => {},
    x if x == OPCODE::Try as Word => {},
    x if x == OPCODE::TryEnd as Word => {},
    x if x == OPCODE::TryCase as Word => {},
    x if x == OPCODE::TryCaseEnd as Word => {},
    x if x == OPCODE::Raise as Word => {},
    x if x == OPCODE::BsInit2 as Word => {},
    x if x == OPCODE::BsBitsToBytes as Word => {},
    x if x == OPCODE::BsAdd as Word => {},
    x if x == OPCODE::Apply as Word => {},
    x if x == OPCODE::ApplyLast as Word => {},
    x if x == OPCODE::IsBoolean as Word => {},
    x if x == OPCODE::IsFunction2 as Word => {},
    x if x == OPCODE::BsStartMatch2 as Word => {},
    x if x == OPCODE::BsGetInteger2 as Word => {},
    x if x == OPCODE::BsGetFloat2 as Word => {},
    x if x == OPCODE::BsGetBinary2 as Word => {},
    x if x == OPCODE::BsSkipBits2 as Word => {},
    x if x == OPCODE::BsTestTail2 as Word => {},
    x if x == OPCODE::BsSave2 as Word => {},
    x if x == OPCODE::BsRestore2 as Word => {},
    x if x == OPCODE::GcBif1 as Word => {},
    x if x == OPCODE::GcBif2 as Word => {},
    x if x == OPCODE::BsFinal2 as Word => {},
    x if x == OPCODE::BsBitsToBytes2 as Word => {},
    x if x == OPCODE::PutLiteral as Word => {},
    x if x == OPCODE::IsBitstr as Word => {},
    x if x == OPCODE::BsContextToBinary as Word => {},
    x if x == OPCODE::BsTestUnit as Word => {},
    x if x == OPCODE::BsMatchString as Word => {},
    x if x == OPCODE::BsInitWritable as Word => {},
    x if x == OPCODE::BsAppend as Word => {},
    x if x == OPCODE::BsPrivateAppend as Word => {},
    x if x == OPCODE::Trim as Word => {},
    x if x == OPCODE::BsInitBits as Word => {},
    x if x == OPCODE::BsGetUtf8 as Word => {},
    x if x == OPCODE::BsSkipUtf8 as Word => {},
    x if x == OPCODE::BsGetUtf16 as Word => {},
    x if x == OPCODE::BsSkipUtf16 as Word => {},
    x if x == OPCODE::BsGetUtf32 as Word => {},
    x if x == OPCODE::BsSkipUtf32 as Word => {},
    x if x == OPCODE::BsUtf8Size as Word => {},
    x if x == OPCODE::BsPutUtf8 as Word => {},
    x if x == OPCODE::BsUtf16Size as Word => {},
    x if x == OPCODE::BsPutUtf16 as Word => {},
    x if x == OPCODE::BsPutUtf32 as Word => {},
    x if x == OPCODE::OnLoad as Word => {},
    x if x == OPCODE::RecvMark as Word => {},
    x if x == OPCODE::RecvSet as Word => {},
    x if x == OPCODE::GcBif3 as Word => {},
    x if x == OPCODE::Line as Word => {},
    x if x == OPCODE::PutMapAssoc as Word => {},
    x if x == OPCODE::PutMapExact as Word => {},
    x if x == OPCODE::IsMap as Word => {},
    x if x == OPCODE::HasMapFields as Word => {},
    x if x == OPCODE::GetMapElements as Word => {},
    x if x == OPCODE::IsTaggedTuple as Word => {},
    other => panic!("vm_dispatch: Unknown opcode {}", other),   
  }
}

